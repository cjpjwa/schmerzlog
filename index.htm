<!DOCTYPE html>
<html lang="de">
<head>
<!-- general  -->
<title>Schmerzlog</title>
<meta http-equiv="Content-Security-Policy" content="default-src 'self' 'sha256-WJAqLBQEobwtLmyEZbMXJl1tVmKFbz+tZ61i1caUMzE=' 'sha256-JdJrSYkQNS88D5x/siV0y8urlZ7gvGKt5oPg4RS4aXY='">
<meta name="robots" content="noindex,nofollow">
<meta charset="utf-8">
<meta name="keywords" content="schmerz, schmerzprotokoll, schmerztagebuch">
<meta name="description" content="Einfaches Schmerztagebuch">
<meta name="Author" content="P. Janko">
<!-- manifest file -->
<link rel="manifest" href="manifest.json">
<!-- ios webapp  -->
<meta name="viewport" content="user-scalable=yes, width=device-width, initial-scale=1">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<meta name="format-detection" content="telephone=no">
<link rel="apple-touch-icon" href="./apple-touch-icon.png">
<!-- chrome webapp  -->
<meta name="mobile-web-app-capable" content="yes">
<meta name="theme-color" content="#cccccc">
<link rel="icon" sizes="144x144" href="icon_144.png">
<link rel="icon" sizes="192x192" href="icon_192.png">
<link rel="icon" sizes="196x196" href="icon_196.png">
<link rel="icon" sizes="512x512" href="icon_512.png">
<!-- win tile icon and background  -->
<meta name="msapplication-TileColor" content="#999999">
<meta name="msapplication-TileImage" content="icon_144.png">
<!-- icon -->
<link rel="shortcut icon" href="favicon.ico">
<style>
/* ########## basic page settings ##########  */
body				{padding:0px; margin:0px; background:#cccccc; color:#333333; font-family:sans-serif; overflow:auto;-webkit-text-size-adjust: none;}
*:focus 			{outline: none;}
.page				{padding: 0px; margin:0px; display:none;-webkit-touch-callout: none;-webkit-user-select: none;-khtml-user-select: none;-moz-user-select: none;-ms-user-select: none;-o-user-select: none;user-select: none;}

.header				{position:fixed; top: 0px;  left: 0px; padding:0px; margin:0px; background:#333333; height:55px; width:100%; z-index:100}
.header	h1			{position:fixed; top:14px;  left:10px; padding:0px; margin:0px; color:#eeeeee; font-weight:normal; font-size:22px;}
.header	a			{position:fixed; padding:7px; margin:0px; color:#eeeeee; font-weight:normal; font-size:16px; border: 1px solid #eeeeee; border-radius:5px;}
.header	a.button0	{display:block; top:14px; left: 15px; text-decoration:none; padding:0px; margin:0px; color:#eeeeee; font-weight:normal; font-size:22px; border:none}
.header	a.button1	{display:block; top:10px; right:10px; text-decoration:none;}
.header	a.button2	{display:block; top:10px; right:60px; text-decoration:none;}
.header	a:active	{color:#333333; background:#eeeeee}

.content			{position:absolute; top:55px; left:0px; width:100%; padding: 0px; margin:0px; color:#333333;; z-index:10;}
.content h2			{padding: 0px; margin:10px 25px 10px 25px; font-size:20px; font-weight:bold;}
.content p 			{padding: 0px; margin:10px 25px 10px 25px; font-size:16px; font-weight:normal; line-height:22px}
.content p.small	{font-size:12px; white-space: nowrap;}
.content li			{padding: 0px 0px 5px 0px; margin: 0px; font-size:16px; font-weight:normal; line-height:22px}
.content a			{color:#333333}
.textcenter			{text-align:center;}
.textcenter.pad10	{padding:10px;}
.colorred			{color:#990000;}
.small              {font-size:12px; white-space: nowrap;}
#sval				{position:relative; top:0px; left:8px; color:#333333; font-size:20px; font-family:monospace; text-align:center; background:#eeeeee; padding:3px 9px 2px 9px; border:2px solid #333333; border-radius:20px;}
#logoutbutton       {margin-right:22px;}
#resetentrybutton	{margin-right:50px;}

/* table items start page */
.content #slogitems table			{padding:0px; margin:10px auto; margin-bottom:20px; border-collapse:collapse; background:#cccccc; font-weight:bold; font-size:16px; width:93%; border-bottom: 1px solid #cccccc;}
.content #slogitems table th		{padding:3px 10px 3px 15px; background:#666666; color:#eeeeee; border: none; font-weight:normal;}

.content #slogitems table th:first-child						{border-top-left-radius: 5px;}
.content #slogitems table th:last-child							{border-top-right-radius: 5px;}
.content #slogitems table tr:last-child td:first-child			{border-bottom-left-radius: 5px;}
.content #slogitems table tr:nth-last-child(2) td:last-child	{border-bottom-right-radius: 5px;}

.content #slogitems table td				{padding:5px 10px 0px 15px; background: none; border-top: 1px solid #999999}
.content #slogitems table th button			{padding:6px 8px 4px 8px; margin:4px 10px 4px 0px; color:#eeeeee; background:#333333; font-weight:normal; font-size:16px; border:1px solid #eeeeee;}
.content #slogitems table th.mright button 	{padding:0px;margin:0px 10px 0px 0px;font-size:28px; background:none; border:none}
.content #slogitems table td button			{padding:0px 10px 0px 0px; margin:0px; color:#333333; background:none; font-weight:normal; font-size:28px; border:none}
.content #slogitems table .mright			{text-align: right;}
.content #slogitems table .mleft			{text-align: left;}
.content #slogitems table .mleft.pad15		{padding-left:15px;}
.content #slogitems table .comment			{padding:0px 10px 5px 15px; font-size:14px; background:none; border-top: none; font-weight:normal;}
.content #slogitems tbody					{display:none;}

.content table .bg_0				{background:#d5fff7; font-weight:bold;}
.content table .bg_1,.bg_2			{background:#ffE0a3; font-weight:bold;}
.content table .bg_3,.bg_4			{background:#faceca; font-weight:bold;}
.content table .bg_5,.bg_6          {background:#f1acab; font-weight:bold;}
.content table .bg_7,.bg_8			{background:#ff989a; font-weight:bold;}
.content table .bg_9,.bg_10 	 	{background:#f96b6c; font-weight:bold;}

/* new entry page */
.content #newentryform					{padding:10px 0px 0px 0px; margin:0px; text-align:center}
.content #newentryform label.lhead			{padding:0px; margin:20px 10px 10px 10px; font-size:20px; font-weight:bold; display:block}
.content #newentryform table			{padding:0px; margin:0 auto; margin-bottom:5px; border-collapse: collapse; width:88%;}
.content #newentryform table td			{padding:5px; font-size:14px; width:9%}
.content #newentryform table td.small	{font-size:12px; white-space: nowrap; width:33%;}

.content #newentryform #slogstrength 						{padding:0px 5px 0px 5px; margin:5px 0px 15px 0px; height:10px; width: 85%; background:#ffffff; border:1px solid #333333; border-radius:5px; -webkit-appearance: none;}
.content #newentryform #slogstrength::-webkit-slider-thumb 	{width:25px; height:25px; background: #333333; border:1px solid #eeeeee; border-radius:5px; cursor: pointer; -webkit-appearance: none; appearance: none;}
.content #newentryform #slogstrength::-moz-range-thumb 		{width:25px; height:25px; background: #333333; border:1px solid #eeeeee; border-radius:5px; cursor: pointer;}

.content #newentryform #slogcomment::placeholder {font-weight:normal; color: #cccccc; opacity: 1;}
.content #newentryform #slogcomment		{padding:7px 0px 7px 10px; margin:5px 0px 15px 0px; color:#333333; width:86%; background:#ffffff; border:1px solid #333333; border-radius:5px; font-weight:bold; font-size:20px;}
.content #newentryform #slogdatetime	{padding:5px 0px 5px 10px; margin:5px 0px 10px 0px; color:#333333; width:86%; background:#ffffff; border:1px solid #333333; border-radius:5px; font-weight:bold; font-size:20px;}

.content button 					{color:#eeeeee; text-align:center; padding:10px 10px 10px 10px; margin:0px; background:#333333; border:1px solid #eeeeee; cursor:pointer; border-radius:5px; font-size:16px; font-weight: normal;}
.content button.blarge 				{display:block; width:90%; margin:20px auto; font-weight:normal; font-size:20px;}
.content pre#csvreport				{padding:8px; margin:10px auto; background:#eeeeee; color:#333333; font-family:monospace; font-weight:normal; font-size:14px; text-align:left; width:84%; height:300px; border:1px solid #333333; border-radius:5px; overflow:auto; -webkit-user-select: all;-khtml-user-select: all;-moz-user-select: all;-ms-user-select: all;-o-user-select: all;user-select: all;}

/* pw styles */
#pwinit					{display:none; position:fixed; left:10px; top:10px; right:10px; bottom:15px; padding:10px 20px 10px 20px; margin:0px; overflow:auto; background:#cccccc; border:1px solid #333333; text-align:center; border-radius:5px; box-shadow: 1px 1px 10px 1px #666666; z-index:1100;}
#pwchange				{display:none; position:fixed; left:10px; top:10px; right:10px; bottom:15px; padding:10px 20px 10px 20px; margin:0px; overflow:auto; background:#cccccc; border:1px solid #333333; text-align:center; border-radius:5px; box-shadow: 1px 1px 10px 1px #666666; z-index:1100;}
.pwform p				{display:block; padding: 5px 0px 5px 0px; margin:0px; font-size:16px; font-weight:normal;}
.pwform label			{display:block; padding: 5px 0px 5px 0px; margin:0px; font-size:16px; font-weight:bold; white-space:nowrap;}
.pwform h2 				{padding: 15px 0px 5px 0px; margin:0px; font-size:20px; font-weight:bold;}
.pwform					{padding:0px; margin:0px;}
.pwform button			{padding:8px 0px 8px 0px; margin:15px 0px 15px 0px; color:#eeeeee; width:75%; background:#333333; border:1px solid #eeeeee; border-radius:5px; font-weight:normal; font-size:16px; text-align:center; cursor:pointer;}
.pwform button.blite	{margin-top:5px; color:#333333; background:#eeeeee; border:1px solid #333333;}
.pwform input[type=password]	{padding:5px 0px 5px 5px; margin: 0px 0px 5px 0px; color:#333333; width:75%; background:#ffffff; border:1px solid #333333; border-radius:5px; font-weight:normal; font-size:16px;}

#pwlogin				{display:none;  position:fixed; left:5px; top:5px; right:5px; bottom:5px; padding:30px 20px 20px 20px; margin:0px; overflow:auto; background:#cccccc; border:1px solid #333333; text-align:center; border-radius:5px; box-shadow: 1px 1px 10px 1px #666666; z-index:1300;}
#pwlogin .pwform label 	{white-space:nowrap; font-weight:bold; font-size:20px;}
#pwlogin .pwform input 	{font-size:20px; padding:10px;}
#pwlogin .pwform button {font-size:24px; padding:10px; width:80%;}


/* ########## footer settings ##########  */
p.footer			{padding:5px 0px 10px 0px; margin:0px; color:#333333; font-weight:normal; font-size:16px; text-align:center;}
p.footer a			{color:#333333}

/* ########## info settings ##########  */
#info .content h2	{padding: 10px 30px 10px 30px; margin: 0px; font-weight:bold; font-size:20px;}
#info .content p	{padding:  5px 30px 10px 30px; margin: 0px; text-align:justify}
#info .content ul	{padding:  5px 30px 10px 30px; margin: 0px 0px 0px 5%}
#info .content li	{text-align:left}

/* Larger than 800px  */
@media (min-width: 800px) {
.content								{width:800px; left:50%; margin-left:-400px; margin-top:20px;}
.content button.blarge 					{width:770px;}
.content #newentryform table			{width:758px;}
.content #newentryform #slogstrength	{width:758px;}
.content #newentryform #slogcomment		{width:758px;}
.content #newentryform #slogdatetime	{width:758px;}
.pwform									{width:800px; margin:0px auto;}
}
</style>
<script src="crypto-js.js"></script>
<script>
//##########################################################
// Schmerzlog, (c) 2020 webapps@cjpj, P. Janko
// MIT License: https://www.cjpj.de/contact.htm#terms
//##########################################################
// Date			Version			Description
// 20.06.2020	0.1alpha        initial version (simple App Shell 0.2)
// 21.06.2020	0.2alpha        fix delete day bug (decrypt day ID)
// 09.08.2020	0.3alpha        add maskable icon
// 13.09.2020	0.4alpha        add app shortcut for New Entry
// 18.06.2021	0.5alpha		fix ios14.6 indexDB problem, no timeoffset for ios14.6
// 23.10.2021	0.6alpha 		update to crypto-js-4.1.1
// 26.10.2023	0.7alpha 		update to crypto-js-4.2.0
// 04.01.2025	0.8alpha 		update to simple App Shell 0.9, add CSP, remove ios14.6 workaround, remove spaces from day ID
//##########################################################
// based on: https://www.cjpj.de/appshell.htm
// Simple App Shell, (c) 2020 webapps@cjpj, P. Janko
// MIT License: https://www.cjpj.de/contact.htm#terms
//##########################################################
// using crypto-js: https://github.com/brix/crypto-js
// The MIT License (MIT) (http://opensource.org/licenses/MIT)
// Copyright (c) 2009-2013 Jeff Mott
// Copyright (c) 2013-2016 Evan Vosberg
//##########################################################
//strict mode
"use strict";

//##########################################################
//basic global vars
const appVersion = "0.8alpha";
const appRelease = "04.01.2025";
//global array with all pages
let appPages = new Array();
const maxNofItems = 500; 				//set max number of items
let curNofItems = 0;					//set current number of items global
const reCheck = /[<>&;\\"]/; 			//regex with not allowed chars in hinweis
//global vars for pw
const reCheckPW = /^[0-9A-Za-z]*$/; 	//regex for pw: only letters, numbers
const pwMin = 4;						//pw min length
const pwMax = 20;						//pw max length (also check maxlength attribute in input)
let currentPWHash = "";					//pw hash
let currentPWDate = "";					//pw date/time
const  defaultPW = "000";				//000 default if no pw set by user
let cryptoPW = defaultPW;				//pw used for encryption/decryption
//array for week days
let weekDay = new Array();
weekDay[0] = "Sonntag";
weekDay[1] = "Montag";
weekDay[2] = "Dienstag";
weekDay[3] = "Mittwoch";
weekDay[4] = "Donnerstag";
weekDay[5] = "Freitag";
weekDay[6] = "Samstag";

//basic messages
const msg01 = "Achtung, maximale Anzahl von " + maxNofItems + " Einträgen erreicht!\nSie müssen Einträge löschen, bevor sie neue hinzufügen können.";
const msg02 = "Bitte gültige Daten für Datum/Uhrzeit eingeben";
const msg03 = "<hr><br><h2 class=\"textcenter\">Schmerzlog<br>Keine Einträge vorhanden!</h2>";
const msg04 = "<p  class=\"textcenter\">Bitte oben <strong>Neuer Eintrag</strong> wählen!</p><br><hr>";
const msg05 = "Diesen Eintrag löschen?";
const msg06 = "Diesen Tag löschen?";
const msg07 = "Alle Einträge wirklich löschen?\nDiese Aktion kann nicht rückgängig gemacht werden!";
const msg08 = "Achtung!\n\nDer Browser untersützt keine Datenspeicherung.\nVerwendung nicht möglich (no IndexedDB)!";
const msg09 = "Fehler beim Anlegen der Datenbank.\nBitte App komplett schließen und erneut versuchen!";
const msg10 = "Speichern fehlgeschlagen!\nBitte erneut versuchen!";
const msg11 = "Löschen fehlgeschlagen!\nBitte erneut versuchen!";
const msg12 = "Folgende Zeichen dürfen nicht verwendet werden:\n\n > < ; & \\ \" ";
//password messages
const msgP01 = "Passwort erfolgreich gespeichert!";
const msgP02 = "Ungültiges Passwort!\nBitte gültiges Passwort eingeben!\nZwischen 4 und 20 Zeichen,\nnur Buchstaben und Zahlen\nkeine Sonderzeichen, keine Umlaute";
const msgP03 = "Passwörter stimmen nicht überein!\nBitte erneut versuchen.";
const msgP04 = "Achtung!\n\nDer Browser untersützt keine Datenspeicherung.\nVerwendung nicht möglich (no localstorage)!";
const msgP05 = "Falsches Passwort.\nBitte erneut versuchen!";
const msgP06 = "Passwortschutz wirklich entfernen?";
const msgP07 = "Passwortschutz wurde erfolgreich entfernt!";
const msgP08 = "\nBitte zuerst ALTES Passwort eingeben!";
//status messages
const msgS01 = "Verbunden";
const msgS02 = "Getrennt";
const msgS03 = "Ja - Offline verfügbar";
const msgS04 = "Nein - <a href=\"index.htm\">In Cache laden</a>";
const msgS05 = "Update verfügbar - <a href=\"index.htm\">Update laden</a>";

//##########################################################
//register the serviceworker
if ("serviceWorker" in navigator) {
	window.addEventListener("load", function() {
		navigator.serviceWorker.register("/serviceworker.js").then(function(registration) {
			updateViaCache: "none";    //bypass http cache
			// Registration was successful
			//console.log("ServiceWorker registration successful with scope: ", registration.scope);
			//check for update
			registration.addEventListener("updatefound", function() {
				document.getElementById("supdate").innerHTML = msgS05;
			});
		}).catch(function(err) {
			// registration failed :(
			//console.log("ServiceWorker registration failed: ", err);
		});
	});
}
//##########################################################

//##########################################################
//set div page display from none to block based on hash
function showPage() {
	//set first page for no hashid given
	let divID = appPages[0].getAttribute("id");
	//get page div id from hash
	if ((location.hash !== "") && (location.hash !== undefined)) {divID = location.hash.substring(1);}
	//hide all pages first
	let pageID1;
	for (let i = 0; i < appPages.length; i++) {
		pageID1 = appPages[i].getAttribute("id");
		document.getElementById(pageID1).style.display = "none";
	}
	//only show pages for existing IDs (whitelist)
	let whitelistPage = false;
	let pageID2;
	for (let n = 0; n < appPages.length; n++) {
		pageID2 = appPages[n].getAttribute("id");
		if (divID === pageID2) {whitelistPage = true;}
	}
	//set first page for id not whitelisted
	if (!whitelistPage) {divID = appPages[0].getAttribute("id");}
	//show page and scroll to top
	document.getElementById(divID).style.display = "block";
	document.body.scrollTop = 0; 			//Chrome, Safari
	document.documentElement.scrollTop= 0;	//Firefox, IE
}

//##########################################################
//set app status for network, chaching
//Note: update is handled in SW registration
function setAppStatus() {
	//set network status initial and listener
	if (window.navigator.onLine) {document.getElementById("snet").innerHTML = msgS01;} else {document.getElementById("snet").innerHTML = msgS02;}
	window.addEventListener("online", function(e)  {document.getElementById("snet").innerHTML = msgS01;});
	window.addEventListener("offline", function(e) {document.getElementById("snet").innerHTML = msgS02;});
	//set cache status (considered as chached if index.htm found)
	try {
		caches.match("/index.htm").then(function(cacheResponse) {
			//console.log('#####cacheResponse ', cacheResponse);
			if (cacheResponse) {
				document.getElementById("scache").innerHTML = msgS03;
			} else {
				document.getElementById("scache").innerHTML = msgS04;
			}
		});
	} catch(err) {
		//console.log('#####cacheError ', err);
		document.getElementById("scache").innerHTML = "-";
	}
}

//##########################################################
//init app, set version, check deep links, show start page
document.addEventListener("DOMContentLoaded", function(event) {
	//fill array with pages
	appPages = document.querySelectorAll("div.page");
	//show start page or deep link page
	showPage();
	//init handler for hash navigation
	window.addEventListener("hashchange", showPage);
	//set version
	document.getElementById("version").innerHTML = appVersion;
	document.getElementById("release").innerHTML = appRelease;
	let footerVer = document.querySelectorAll("span.fversion");
	for (let i = 0; i < footerVer.length; i++) {
		footerVer[i].innerHTML = appVersion;
	}
	//set app status
	setAppStatus();
	//check for pw and load
	if (loadPassword()) {
		//############## user has set a pw ##################
		//note: createIndexedDB() is called in checkPassword()
		//show login pw popup, set last pw change
		document.getElementById("pwlogin").style.display = "block";
		document.getElementById("loginpw").focus(); //set focus to field
		document.getElementById("pwdate").innerHTML = currentPWDate;
		//show logout button and button to change pw
		document.getElementById("logoutbutton").style.display = "block";
		document.getElementById("changepwbutton").style.display = "block";
		//hide button to set a pw
		document.getElementById("setpwbutton").style.display = "none";
	} else {
		//############## user has NOT set a pw ##################
		//create indexedDB and update startpage
		createIndexedDB();
		//hide login pw popup
		showHideModal(false,"pwlogin");
		//hide logout button and button to change pw
		document.getElementById("logoutbutton").style.display = "none";
		document.getElementById("changepwbutton").style.display = "none";
		//show button to set a pw
		document.getElementById("setpwbutton").style.display = "block";
	}
	//###################################
	//add special application events
	document.getElementById("newentryform").addEventListener("submit", function(event) {event.preventDefault();addNewItem();});
	document.getElementById("slogstrength").addEventListener("change", function(event) {document.getElementById("sval").innerHTML=this.value;});
	document.getElementById("logoutbutton").addEventListener("click", function(event) {event.preventDefault();document.location.href="index.htm";});
	document.getElementById("changepwbutton").addEventListener("click", function(event) {showHideModal(true,"pwchange");});
	document.getElementById("setpwbutton").addEventListener("click", function(event) {showHideModal(true,"pwinit");});
	document.getElementById("reportbutton").addEventListener("click", function(event) {location.hash="shareentry";});
	document.getElementById("delallbutton").addEventListener("click", deleteAll);
	document.getElementById("resetentrybutton").addEventListener("click", function(event) {
		event.preventDefault();
		document.getElementById("newentryform").reset();
		document.getElementById("sval").innerHTML = "5";
	});
	//password form event listener
	document.getElementById("changepwform").addEventListener("submit", function(event) {event.preventDefault();changePassword('newpw1','newpw2','changepwform');});
	document.getElementById("removepwbutton").addEventListener("click", removePassword);
	document.getElementById("cancelpwbutton1").addEventListener("click", function(event) {showHideModal(false,'pwchange');});
	document.getElementById("newpwform").addEventListener("submit", function(event) {event.preventDefault();setPassword('password1','password2','newpwform');});
	document.getElementById("cancelpwbutton2").addEventListener("click", function(event) {showHideModal(false,'pwinit');});
	document.getElementById("loginpwform").addEventListener("submit", function(event) {event.preventDefault();checkPassword();});
});

//##########################################################
//           Schmerzlog App Code
//##########################################################

//##########################################################
//create/open an indexedDB for storing data and update startpage
//show content of db on startpage
let db;
function createIndexedDB() {
	if (!window.indexedDB) {
		alert(msg08);
		return;
	} else {
		let dbiosWA = window.indexedDB;
		let requestDB = dbiosWA.open("slogDB", 1);		//var requestDB = window.indexedDB.open("slogDB", 1);
		//error
		requestDB.onerror = function(err) {
			//console.log("Error DB: " + err.target.errorCode);
			alert(msg09);
		};
		//upgrade if not exist
		requestDB.onupgradeneeded = function(event) {
			//console.log('Upgrade DB');
			let db = event.target.result;
			if (!db.objectStoreNames.contains("slogData")) {
				let objStore = db.createObjectStore("slogData", {keyPath: "id", autoIncrement: true});
				objStore.createIndex("date", "date", {unique: false});
				objStore.createIndex("time", "time", {unique: false});
				objStore.createIndex("comment", "comment", {unique: false});
				objStore.createIndex("strength", "strength", {unique: false});
			}
		};
		//success
		requestDB.onsuccess = function(event) {
			//console.log("Open DB");
			db = this.result;      // Equal to: db = req.result;
			//update startpage
			refreshStartPage();
		};
	}
}

//##########################################################
//add new item to indexedDB and update startpage
//- newJsonItem:	new item data in json format [json]
function addToIndexedDB(newJsonItem) {
	let transaction = db.transaction(["slogData"], "readwrite");
	let slogData = transaction.objectStore("slogData");
 	let requestAdd = slogData.add(newJsonItem);
	requestAdd.onerror = function(err) {
		//console.log("Error Add: " + err.target.error.name);
		alert(msg10);
	};
	requestAdd.onsuccess = function(event) {
		//console.log("Add OK");
		//show startpage
		location.hash = "appstart";
		//reset new item page
		document.getElementById("newentryform").reset();
		document.getElementById('sval').innerHTML = "5";
		//update startpage
		refreshStartPage();
	};
}

//############################################################
//delete one item
//- itemPK		prim. key for item [id]
//- itemTime	time of item HH:MM [string]
function deleteItem(itemPK,itemTime) {
	if (confirm(itemTime + " - " + msg05 +" [" + itemPK + "]")) {
		let transaction = db.transaction(["slogData"], "readwrite");
		let slogData = transaction.objectStore("slogData");
	 	let requestDel = slogData.delete(itemPK);
		requestDel.onerror = function(err) {
			//console.log("Error Delete: " + err.target.error.name);
			alert(msg11);
		};
		requestDel.onsuccess = function(event) {
			//console.log("Delete OK");
			//update startpage
			refreshStartPage();
		};
	}
}

//############################################################
//delete all items for a day
//- daystr		day from db YYYY:MM:DD-WD [string]
function deleteDay(daystr) {
	if (confirm(msg06 + "\n" + daystr)) {
		let transaction = db.transaction(["slogData"], "readwrite");
		let slogData = transaction.objectStore("slogData");
		slogData.openCursor().onsuccess = function(event) {
			let cursor = event.target.result;
			if (cursor) {
				if (daystr === decryptData(cursor.value.date,cryptoPW)) {
				 	let requestDel = slogData.delete(cursor.primaryKey);
					requestDel.onerror = function(err) {
						//console.log("Error Delete: " + err.target.error.name);
					};
					requestDel.onsuccess = function(event) {
						//console.log("Delete OK");
					};
				}
				cursor.continue();
			} else {
				//update startpage
				refreshStartPage();
			}
		};
	}
}

//############################################################
//clear all entries in database objectstore
function deleteAll() {
	if (confirm(msg07)) {
		let transaction = db.transaction(["slogData"], "readwrite");
		let slogData = transaction.objectStore("slogData");
		let requestClear = slogData.clear();
		requestClear.onerror = function(err) {
			//console.log("Error Clear: " + err.target.error.name);
		};
		requestClear.onsuccess = function(event) {
			//console.log("Clear OK");
			refreshStartPage();
			location.hash = "appstart";
		};
		//also clear the localstorage to delete pw
		if (localStorage != null) {
			localStorage.clear();
			//hide buttons: logout, change pw, show button: set a pw
			document.getElementById("logoutbutton").style.display = "none";
			document.getElementById("changepwbutton").style.display = "none";
			document.getElementById("setpwbutton").style.display = "block";
		}
	}
}

//############################################################
//show report with all entries in csv format
//1,2020-03-13,11:11,5,comment
function updateCSVReport() {
	let csvArray = new Array();
	document.getElementById("csvreport").innerHTML = "";
	//read all items from indexDB
	let transaction = db.transaction(["slogData"], "readonly");
	let slogData = transaction.objectStore("slogData");
	slogData.openCursor().onsuccess = function(event) {
		let cursor = event.target.result;
		if (cursor) {
			//build array with csv strings
			csvArray.push(decryptData(cursor.value.date,cryptoPW).substring(0,10) + "," +  decryptData(cursor.value.time,cryptoPW) + "," + decryptData(cursor.value.strength,cryptoPW) + ",\"" + decryptData(cursor.value.comment,cryptoPW) + "\"<br>");
			cursor.continue();
		} else {
			let csvStr = "Schmerzlog " + appVersion + ", Einträge: " + csvArray.length + "<br>Nr,Datum,Uhrzeit,Stärke,Hinweis<br>";
			//show array content as csv
			csvArray.sort();
			for (let i = 0; i < csvArray.length; i++) {
				csvStr = csvStr + (i+1)+ "," + csvArray[i];
			}
			if (csvArray.length === 0) {csvStr = "";}
			document.getElementById("csvreport").innerHTML = csvStr;
		}
	};
}

//############################################################
//add event listener to slog table (open/close day, delete day, delete slog entry)
//note: no inline onclick events with strict CSP possible, must be external listener
//- dayArr: 	array with day entries [array]
function addTableEventListener(dayArr) {
	//read all items from indexDB
	let transaction = db.transaction(["slogData"], "readonly");
	let slogData = transaction.objectStore("slogData");
	slogData.openCursor().onsuccess = function(event) {
		let cursor = event.target.result;
		if (cursor) {
			//add listener for delete slog entry
			let delButtonID = "delbtID_" + cursor.primaryKey;
			let delPKeyID   =  cursor.primaryKey;
			let delTime     =  decryptData(cursor.value.time,cryptoPW);
			document.getElementById(delButtonID).addEventListener("click", function(event) {
				deleteItem(delPKeyID,delTime);
			});
			cursor.continue();
		} else {
			//add listener for open/close and delete day
			for (let i = 0; i < dayArr.length; i++) {
				let ocButtonID     = "opencloseID_" + dayArr[i].replaceAll(' ','');;
				let dayID          = "dayID_" + dayArr[i].replaceAll(' ','');;
 				let deldayButtonID = "delbtDayID_" + dayArr[i].replaceAll(' ','');;
				document.getElementById(ocButtonID).addEventListener("click", function(event) {openCloseDay(dayID);});
				document.getElementById(deldayButtonID).addEventListener("click", function(event) {deleteDay(dayArr[i]);});
			}
		}
	};
}

//############################################################
//load all items from indexedDB and show on start page
function refreshStartPage() {
	//basic arrays
	let rowArray = new Array();
	let dayArray = new Array();
	//read all items from indexDB
	let transaction = db.transaction(["slogData"], "readonly");
	let slogData = transaction.objectStore("slogData");
	slogData.openCursor().onsuccess = function(event) {
		let cursor = event.target.result;
		if (cursor) {
			//build arrays with rows for all items and for all dates
			rowArray.push("<!--"+decryptData(cursor.value.date,cryptoPW)+"-"+decryptData(cursor.value.time,cryptoPW)+"--><tr class=\"bg_"+decryptData(cursor.value.strength,cryptoPW)+"\"><td>"+decryptData(cursor.value.time,cryptoPW)+"</td><td>Stärke: "+decryptData(cursor.value.strength,cryptoPW)+"</td><td class=\"mright\" rowspan=\"2\"><button id=\"delbtID_" + cursor.primaryKey + "\" type=\"button\">×</button></td></tr><tr class=\"bg_"+decryptData(cursor.value.strength,cryptoPW)+"\"><td class=\"comment\" colspan=\"2\"><strong>Hinweis: </strong>"+decryptData(cursor.value.comment,cryptoPW)+"</td></tr>\n");
			//only add new day if not already exists
			if (dayArray.toString().indexOf(decryptData(cursor.value.date,cryptoPW)) === -1) {dayArray.push(decryptData(cursor.value.date,cryptoPW));}
			cursor.continue();
		} else {
			//console.log('Entries all handled.');
			//build table blocks for each day
			dayArray.sort();
			rowArray.sort();
			let allItemStr = "";
			for (let i = 0; i < dayArray.length; i++) {
				//table header with day info
				let dayStrID   = dayArray[i].replaceAll(' ','');   //remove spaces from id
				let dayHeadStr = "<table><thead><tr><th class=\"mleft pad15\" colspan=\"2\" id=\"opencloseID_"+dayStrID+"\"><span id=\"arrdayID_"+dayStrID+"\">&#9660;</span>&nbsp;&nbsp;&nbsp;&nbsp;"+dayArray[i]+"</th><th class=\"mright\"><button id=\"delbtDayID_"+dayStrID+"\" type=\"button\">×</button></th></tr></thead>\n";
				let dayBodyStr = "<tbody id=\"dayID_"+dayStrID+"\">";
				//get all items for this day and create rows
				for (let i2 = 0; i2 < rowArray.length; i2++) {
					if (rowArray[i2].indexOf(dayArray[i]) !== -1) {
						dayBodyStr = dayBodyStr + rowArray[i2];
					}
				}
				//build complete string for day
				allItemStr = allItemStr +  dayHeadStr +  dayBodyStr + "</tbody></table>";
			}
			//show start msg for no entries
			if (dayArray.length === 0) {allItemStr = msg03 + msg04;}
			//update info on start, status and report page
			curNofItems = rowArray.length;
			document.getElementById("remainitems").innerHTML = maxNofItems - curNofItems;
			document.getElementById("slogitems").innerHTML = allItemStr;
			document.getElementById("scurrent").innerHTML = curNofItems;
			document.getElementById("smax").innerHTML = maxNofItems;
			updateCSVReport();
			addTableEventListener(dayArray);
		}
	};
}

//##########################################################
//open and close rows in day table
//- dayID		id of tbody to show/hide [ID]
function openCloseDay(dayID) {
	let dayBody  = document.getElementById(dayID);
	let dayArrow = document.getElementById("arr"+dayID);
	if ((dayBody.style.display === "none") || (dayBody.style.display === "")) {
		dayBody.style.display = "table-row-group";
		dayArrow.innerHTML = "&#9650;";
	} else {
		dayBody.style.display = "none";
		dayArrow.innerHTML = "&#9660;";
	}
}

//############################################################
//turn date object in readable date format
//return value: visual date string 2015-12-06 - Sonntag [string]
//- dateobj		date Obj from input form [Obj]
function makeVisualDate(dateobj) {
	//define separators
	let sepa1 = "-";
	let sepa2 = "-";
	//get year and day from date object
	let mikYear  = dateobj.getFullYear();
	let mikMonth = dateobj.getMonth() + 1; //starts with 0
	let mikDay   = dateobj.getDate();
	//get day names from global array weekDay
	let mikWeekDay   = weekDay[dateobj.getDay()];
	//always show two digit values for month and day
	if (parseInt(mikMonth) < 10) {sepa1 = "-0";} else {sepa1 = "-";};
	if (parseInt(mikDay) < 10)   {sepa2 = "-0";} else {sepa2 = "-";};
	//build visual date str: 2015.12.06 - So
	let mikDateVisual = mikYear + sepa1 + mikMonth + sepa2 + mikDay + " - " +  mikWeekDay;
	return mikDateVisual;
}

//############################################################
//turn date object in readable time format
//return value: visual time string 11:23 [string]
//- dateobj		date Obj from input form [Obj]
function makeVisualTime(dateobj) {
	//define separator
	let sepa1 = "";
	let sepa2 = ":";
	//get time (hours and mins) from date object
	let mikHours = dateobj.getHours();
	let mikMins = dateobj.getMinutes();
	//set different time for ios 12..., NOT for IOS 14.6 anymore
	if (((navigator.userAgent.toLowerCase().indexOf("iphone") !== -1) || (navigator.userAgent.toLowerCase().indexOf("ipad") !== -1) || (navigator.userAgent.toLowerCase().indexOf("ipod") !== -1)) && (navigator.userAgent.toLowerCase().indexOf("os 12_") !== -1)) {
		mikHours = mikHours+((dateobj.getTimezoneOffset())/60);
 	}
	//always show two digit values for hours and mins and day
	if (parseInt(mikHours) < 10) {sepa1 = "0";} else {sepa1 = "";};
	if (parseInt(mikMins) < 10)   {sepa2 = ":0";} else {sepa2 = ":";};
	//build visual time str:  11:23
	let mikTimeVisual = sepa1 + mikHours + sepa2 + mikMins;
	return mikTimeVisual;
}

//##########################################################
//add new item
function addNewItem() {
	//get form entries
	let newComment  = document.getElementById("slogcomment").value;
	let newStrength = document.getElementById("slogstrength").value;
	let newDateTime = document.getElementById("slogdatetime").value;
	//check for not allowed chars
	if (reCheck.test(newComment))  {
		alert(msg12);
		document.getElementById("slogcomment").focus();
	} else {
		//check for max nof items
		if (curNofItems === maxNofItems) {
			alert(msg01);
		} else {
			//check for valid date (date-time-local not ff support)  note:attribut required does not work with IOS on datetime-local
			let dateObj = new Date(newDateTime);
			if ((dateObj === "") || (dateObj === undefined) || (dateObj === "Invalid Date") || (newDateTime === "")) {
				alert(msg02);
				document.getElementById("slogdatetime").focus();
			} else {
				//split date and time
				let newDate = makeVisualDate(dateObj);
				let newTime = makeVisualTime(dateObj);
				//build json obj  {"date":"YYYY:MM:DD-WD", "time":"HH:MM", "comment":"this is a comment", "strength":"5"}
				let newSlogItem = {};
					newSlogItem.date     = encryptData(newDate,cryptoPW);
					newSlogItem.time     = encryptData(newTime,cryptoPW);
					newSlogItem.comment  = encryptData(newComment,cryptoPW);
		   	   		newSlogItem.strength = encryptData(newStrength,cryptoPW);
				//update indexedDB with new item
				addToIndexedDB(newSlogItem);
			}
		}
	}
}

//##########################################################
// data encryption handling
//##########################################################

//##########################################################
// AES encrypt data
//- eData:	data to encrypt [string]
//- ePW:	password to encrypt [string]
//returnvalue: aes encryted data [string]
function encryptData(eData,ePW) {
	let cipherStr = CryptoJS.AES.encrypt(eData,ePW).toString();
	return cipherStr;
}

//##########################################################
// AES decrypt data
//- dData:	data to decrypt [string]
//- dPW:	password to decrypt [string]
//returnvalue: aes decryted data [string]
function decryptData(dData,dPW) {
	let bytes  = CryptoJS.AES.decrypt(dData,dPW);
	let clearStr = bytes.toString(CryptoJS.enc.Utf8);
	return clearStr;
}

//##########################################################
// AES reencrypt data after new pw or pw change
//- oldPW:	old password for decrypton [string]
//- newPW:	new password for encrypton [string]
//- typePW: 'new'=new pw set, 'change'=existing pw changed, 'remove'=existing pw removed  [string]
function reencryptData(oldPW,newPW,typePW) {
	//update all data in indexedDB
	let transaction = db.transaction(["slogData"], "readwrite");
	let slogData = transaction.objectStore("slogData");
	slogData.openCursor().onsuccess = function(event) {
		let cursor = event.target.result;
		if (cursor) {
			//decrypt data with old PW
			let clearDate = decryptData(cursor.value.date,oldPW);
			let clearTime = decryptData(cursor.value.time,oldPW);
			let clearComm = decryptData(cursor.value.comment,oldPW);
			let clearStre = decryptData(cursor.value.strength,oldPW);
			//encrypt data with new pw and update DB
			let updateData = cursor.value;
			updateData.date = encryptData(clearDate,newPW);
			updateData.time = encryptData(clearTime,newPW);
			updateData.comment = encryptData(clearComm,newPW);
			updateData.strength = encryptData(clearStre,newPW);
			cursor.update(updateData);
			cursor.continue();
		} else {
			//action depending on change type
			if (typePW === "new") {
				//new pw initially set: force reload to show login page
				document.location.reload();
			} else if (typePW === "change") {
				//existing pw changed: show info page
				location.hash = "info";
			} else if (typePW === "remove") {
				//pw protection removed: set default pw
                cryptoPW = defaultPW;
				alert(msgP07);
				document.location.href = "index.htm";
			} else {
				alert("Encryption Error - No type specified!")
			}
		}
	};
}


//##########################################################
// password handling
//##########################################################

//##########################################################
//check pw entry, save pw and close popup after saving
//- pwID2:	id of 1. pw field [ID]
//- pwID2:	id of 2. pw field [ID]
//- pwform:	form ID containing pw fields [ID]
function setPassword(pwID1,pwID2,pwform) {
	let pw1 = document.getElementById(pwID1);
	let pw2 = document.getElementById(pwID2);
	if ((pw1.value === "") || (pw1.value.length < pwMin) || (pw1.value.length > pwMax) || (!(reCheckPW.test(pw1.value)))) {
		alert(msgP02);
		pw1.focus();
	} else {
		if (pw1.value !== pw2.value) {
			alert(msgP03);
			pw2.focus();
		} else {
			//save new/changed pw with localstorage (note: expecting localStorage.setItem used in savePassword NOT to be async!)
			if (savePassword(pw1.value)) {
				//reset all pw forms, hide all modal popup, show info page
				showHideModal(false,"pwinit");
				showHideModal(false,"pwchange");
				showHideModal(false,"pwlogin");
				//reencrypt data with new or changed pw
				if (pwform === "newpwform") {
					reencryptData(cryptoPW,pw1.value,"new");
				} else if (pwform === "changepwform") {
					reencryptData(cryptoPW,pw1.value,"change");
				}
			}
		}
	}
}

//##########################################################
//change old pw to new pw
//- pwID2:	id of 1. pw field [ID]
//- pwID2:	id of 2. pw field [ID]
//- pwform:	form ID containing pw fields [ID]
function changePassword(pwID1,pwID2,pwform) {
	//check for pw rules first (do not forward spec.chars to CryptoJS)
	let oldPW = document.getElementById("oldpw");
	if ((oldPW.value === "") || (oldPW.value.length < pwMin) || (oldPW.value.length > pwMax) || (!(reCheckPW.test(oldPW.value)))) {
		alert(msgP05 + msgP08);
		oldPW.focus();
	} else {
		//check for matching old pw
		let oldPWhash = CryptoJS.SHA256(oldPW.value);
		if (oldPWhash.toString() === currentPWHash.toString()) {
			//check new passwords
			setPassword(pwID1,pwID2,pwform);
		} else {
			alert(msgP05 + msgP08);
			oldPW.focus();
		}
	}
}

//##########################################################
//check login pw
function checkPassword() {
	//check for pw rules first (do not forward spec.chars to CryptoJS)
	let loginPW = document.getElementById("loginpw");
	if ((loginpw.value === "") || (loginpw.value.length < pwMin) || (loginpw.value.length > pwMax) || (!(reCheckPW.test(loginpw.value)))) {
		alert(msgP05);
		loginPW.focus();
	} else {
		//check for matching pw
		let loginPWhash = CryptoJS.SHA256(loginPW.value);
		if (loginPWhash.toString() === currentPWHash.toString()) {
			//login successfull - hide login screen
			showHideModal(false,"pwlogin");
			//set curent pw
			cryptoPW = loginpw.value;
			//create indexedDB and update startpage
			createIndexedDB();
		} else {
			alert(msgP05);
			loginPW.focus();
		}
	}
}

//##########################################################
//remove password
function removePassword() {
	//check for pw rules first (do not forward spec.chars to CryptoJS)
	let oldPW = document.getElementById("oldpw");
	if ((oldPW.value === "") || (oldPW.value.length < pwMin) || (oldPW.value.length > pwMax) || (!(reCheckPW.test(oldPW.value)))) {
		alert(msgP05 + msgP08);
		oldPW.focus();
	} else {
		//check for matching old pw
		let oldPWhash = CryptoJS.SHA256(oldPW.value);
		if (oldPWhash.toString() === currentPWHash.toString()) {
			if (confirm(msgP06)) {
				//clear the localstorage to delete pw
				if (localStorage != null) {
					localStorage.clear();
				}
				//reencryt data with default pw
				reencryptData(cryptoPW,defaultPW,"remove");
			}
		} else {
			alert(msgP05 + msgP08);
			oldPW.focus();
		}
	}
}

//##########################################################
//show or hide modal page
//- showmodal:	true=show, false=hide [boolean]
//- modalID:	ID of modal window [ID]
function showHideModal(showmodal,modalID) {
	if (showmodal) {
		document.getElementById(modalID).style.display = "block";
	} else {
		document.getElementById(modalID).style.display = "none";
		//reset all pw form by default
		let pwForms = document.querySelectorAll("form.pwform");
		for (let i = 0; i < pwForms.length; i++) {
			pwForms[i].reset();
		}
	}
}

//##########################################################
//hash password and save as localstorage
//returnvalue: true/false for successfull saving
//- savepw:	pw for saving [string]
function savePassword(savepw) {
	//check for working localStorage
	if (localStorage == null) {
		alert(msgP04);
		return false;
	} else {
		//save hashed pw with date
		let dateSaved = new Date();
		localStorage.setItem("datePW",dateSaved.toLocaleString());
		localStorage.setItem("accessPW",CryptoJS.SHA256(savepw));
		document.getElementById("pwdate").innerHTML = dateSaved.toLocaleString();  //set last pw change
		alert(msgP01);
		return true;
	}
}

//##########################################################
//check for saved pw: load pw and hide popup
//returnvalue: true/false for successfull loading pw and date
function loadPassword() {
	//check for working localStorage
	if (localStorage == null) {
		alert(msgP04);
	} else {
		//check for saved pw
		if ((localStorage.getItem("accessPW") != null) && (localStorage.getItem("accessPW") !== "")) {
			currentPWHash = localStorage.getItem("accessPW");
			currentPWDate = localStorage.getItem("datePW");
			return true;
		} else {
			return false;
		}
	}
}
</script>
</head>
<body>
<noscript><h1>Please activate Javascript<br>to run this web app!</h1></noscript>
<!-- ###################### START PAGE ##############################  -->
<div class="page" id="appstart">
	<div class="header">
		<h1>Schmerzlog</h1>
		<a class="button2" href="#newentry">Neuer Eintrag</a>
		<a class="button1" href="#info">Info</a>
	</div>
	<div class="content">
		<p class="textcenter pad10">Verbleibende Einträge: <strong id="remainitems"></strong></p>
		<div id="slogitems">
		</div>
		<p class="textcenter pad10">Bitte <a href="#info"><strong class="colorred">Wichtige Hinweise</strong></a> beachten!</p>
		<p class="footer">Schmerzlog <span class="fversion"></span></p>
	</div>
</div>

<!-- ###################### ENTRY PAGE ##############################  -->
<div class="page" id="newentry">
	<div class="header">
		<h1>Neuer Eintrag</h1>
		<a class="button2" href="#" id="resetentrybutton">Reset</a>
		<a class="button1" href="#appstart">Abbrechen</a>
	</div>
	<div class="content">
		<form id="newentryform" name="newentryform" action="#" novalidate="novalidate">
			<label class="lhead" for="slogstrength">Schmerzstärke <span id="sval">5</span></label>
			<table><tr><td class="small">0 = kein Schmerz</td><td class="small"> &#9664; &nbsp; &#9654; </td><td class="small">starker Schmerz = 10</td></tr></table>
			<table><tr><td class="bg_0">0</td><td class="bg_1">1</td><td class="bg_2">2</td><td class="bg_3">3</td><td class="bg_4">4</td><td class="bg_5">5</td><td class="bg_6">6</td><td class="bg_7">7</td><td class="bg_8">8</td><td class="bg_9">9</td><td class="bg_10">10</td></tr></table>
			<input type="range" name="slogstrength" id="slogstrength" min="0" max="10" step="1"  value="5">
			<label class="lhead" for="slogdatetime">Datum / Uhrzeit wählen</label>
			<p class="small">Einfach ins Feld tippen</p>
			<input type="datetime-local" name="slogdatetime" id="slogdatetime" value="">
			<label class="lhead" for="slogcomment">Hinweis einfügen</label>
			<p class="small">Maximal 120 Zeichen</p>
			<input type="text" name="slogcomment" id="slogcomment" maxlength="120" value="" placeholder="optionaler Hinweis">
			<button class="blarge" type="submit">Eintrag speichern</button>
		</form>
		<p class="footer">Schmerzlog <span class="fversion"></span></p>
	</div>
</div>

<!-- ###################### SHARE PAGE ##############################  -->
<div class="page" id="shareentry">
	<div class="header">
		<h1>CSV Report</h1>
		<a class="button1" href="#info">Zurück</a>
	</div>
	<div class="content">
		<form id="shareentryform" name="shareentryform" action="#" class="textcenter">
			<p class="textcenter pad10">Das untere Feld enthält alle Einträge im <a href="https://de.wikipedia.org/wiki/CSV_(Dateiformat)" target="_blank" rel="noopener">CSV Format</a>. Zum Teilen oder Kopieren der Einträge einfach ins Feld tippen und halten.</p>
	 		<pre id="csvreport"></pre>
			<p><strong class="colorred">Wichtiger Hinweis:</strong><br>Diese personenbezogenen Daten sollten nur verschlüsselt geteilt werden!</p>
			<br>
		</form>
	</div>
</div>

<!-- ###################### ABOUT PAGE ##############################  -->
<div class="page" id="info">
	<div class="header">
		<h1>Schmerzlog</h1>
		<a class="button2" href="#" id="logoutbutton">Abmelden</a>
		<a class="button1" href="#appstart">Zurück</a>
	</div>
	<div class="content">
		<br>
		<p><strong>Schmerzlog</strong> dient zur mobilen Erstellung eines einfachen Schmerztagebuchs.
		Die <strong>individuelle Schmerzstärke</strong> kann auf einer Skala von 0 (kein Schmerz) bis 10 (starker Schmerz) mit Datum/Uhrzeit und Hinweis eingetragen werden.</p>
		<hr>
		<button class="blarge" type="button" id="changepwbutton">Passwort ändern</button>
		<button class="blarge" type="button" id="setpwbutton">Passwort vergeben</button>
		<button class="blarge" type="button" id="reportbutton">Report mit allen Daten</button>
		<button class="blarge" type="button" id="delallbutton">Alle Daten löschen</button>
		<hr>
		<p><strong class="colorred">Wichtige Hinweise:</strong><br>Browserfunktionen wie Browserdaten löschen, Websitedaten löschen, Private Daten löschen, können Ihre gespeicherten Einträge löschen.</p>
		<p>Das Speichern der Einträge funktioniert nicht im Privaten Modus. Nach Schließen der Webapp sind hier die gespeicherten Einträge verloren.</p>
		<hr>
		<p>Schmerzlog steht unter der <a href="https://github.com/cjpjwa/schmerzlog/blob/master/LICENSE" target="_blank" rel="noopener">MIT Lizenz</a> und ist verfügbar auf <a href="https://github.com/cjpjwa/schmerzlog" target="_blank" rel="noopener">GitHub</a>.
		Keine Gewähr für Sicherheit und Richtigkeit der bereitgestellten Informationen! Benutzung auf eigene Gefahr.</p>
		<hr>
		<h2>Status</h2>
		<ul>
			<li>Netzwerk: <strong id="snet">-</strong></li>
			<li>Im Cache: <strong id="scache">-</strong></li>
			<li>Update: <strong id="supdate">kein Update verfügbar</strong></li>
			<li>aktuelle Einträge: <strong id="scurrent"></strong></li>
			<li>maximale Einträge: <strong id="smax"></strong></li>
		</ul>
		<hr>
		<h2>Info</h2>
		<ul>
			<li>App Titel: <strong>Schmerzlog</strong></li>
			<li>Version: <strong id="version">-</strong></li>
			<li>Release Date: <strong id="release">-</strong></li>
		</ul>
		<hr>
		<h2>Impressum</h2>
		<ul>
			<li>Autor: </li>
			<li>Straße: </li>
			<li>Stadt:</li>
			<li>Land:</li>
			<li>Tel: </li>
			<li>Email: </li>
			<li>Website:</li>
		</ul>
		<hr>
		<h2>Open Source Lizenzen</h2>
		<ul>
			<li><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">crypto-js</a> unter <a href="https://github.com/brix/crypto-js/blob/develop/LICENSE" target="_blank" rel="noopener">The MIT License</a></li>
			<li><a href="https://www.cjpj.de/appshell.htm" target="_blank" rel="noopener">Simple App Shell</a> unter <a href="https://www.cjpj.de/contact.htm#terms" target="_blank" rel="noopener">The MIT License</a></li>
		</ul>
		<br>
	</div>
</div>

<!-- ###################### MODAL CHANGE PW PAGE ##############################  -->
<div id="pwchange">
	<form class="pwform" id="changepwform" name="changepwform" action="#">
		<h2>Passwort ändern</h2>
		<p>Letzte Änderung:  <span id="pwdate"></span></p>
		<br>
		<label for="oldpw">Altes Passwort eingeben</label>
		<input type="password" name="oldpw" id="oldpw" value="" placeholder="Ihr altes Passwort" maxlength="20" autocomplete="off"><br>
		<hr>
		<label for="newpw1">Neues Passwort eingeben</label>
		<input type="password" name="newpw1" id="newpw1" value="" placeholder="Ihr neues Passwort" maxlength="20" autocomplete="off"><br>
		<label for="newpw2">Neues Passwort wiederholen</label>
		<input type="password" name="newpw2" id="newpw2" value="" placeholder="Ihr neues Passwort" maxlength="20" autocomplete="off"><br>
		<button type="submit">Passwort ändern</button>
		<button type="button" id="removepwbutton">Passwortschutz entfernen</button>
		<button type="button" id="cancelpwbutton1" class="blite">Abbrechen</button>
		<hr>
		<p>Vorgabe: Zwischen 4 und 20 Zeichen,<br>nur Buchstaben und Zahlen.</p>
		<hr>
		<p class="footer">Schmerzlog <span class="fversion"></span></p>
		<br>
	</form>
</div>

<!-- ###################### MODAL SET NEW PW PAGE ##############################  -->
<div id="pwinit">
	<form class="pwform" id="newpwform" name="newpwform" action="#">
		<h2>Passwort vergeben</h2>
		<p>Passwort vergeben, um Web App gegen Fremdzugriff zu schützen.</p>
		<hr>
		<label for="password1">Passwort eingeben</label>
		<input type="password" name="password1" id="password1" value="" placeholder="Ihr Passwort" maxlength="20" autocomplete="off"><br>
		<label for="password2">Passwort wiederholen</label>
		<input type="password" name="password2" id="password2" value="" placeholder="Ihr Passwort" maxlength="20" autocomplete="off"><br>
		<button type="submit">Passwort speichern</button>
		<button type="button" id="cancelpwbutton2" class="blite">Abbrechen</button>
		<hr>
		<p>Vorgabe: Zwischen 4 und 20 Zeichen,<br>nur Buchstaben und Zahlen.</p>
		<p>Passwort sicher verwahren.<br>Bei Verlust ist kein Zugriff mehr möglich!</p>
		<hr>
		<p class="footer">Schmerzlog <span class="fversion"></span></p>
	</form>
</div>

<!-- ###################### MODAL LOGIN PW PAGE ##############################  -->
<div id="pwlogin">
	<form class="pwform" id="loginpwform" name="loginpwform" action="#">
		<br>
		<br>
		<label for="loginpw">Bitte anmelden</label>
		<br>
		<input type="password" name="loginpw" id="loginpw" value="" placeholder="Passwort eingeben" maxlength="20" autocomplete="off"><br>
		<br>
		<button class="blarge" type="submit">Anmelden</button>
		<br>
		<br>
		<p class="footer">Schmerzlog <span class="fversion"></span></p>
		<br>
	</form>
</div>
</body>
</html>